# This GitHub Action workflow runs once per hour, fetches the 5 latest open issues
# from a specified repository, saves them to a JSON file, and commits the file
# if there are any changes.

name: Fetch Latest Issues

on:
  # Triggers the workflow to run on a schedule
  schedule:
    # Runs "at minute 0 past every hour" (i.e., once every hour)
    - cron: "0 * * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Defines the jobs that will run as part of this workflow
jobs:
  fetch-and-commit:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Sets environment variables for this job
    env:
      # *** IMPORTANT ***
      # Replace 'OWNER/REPO' with your repository's owner and name
      # e.g., 'octocat/Spoon-Knife'
      REPO_URL: "canonical/open-documentation-academy"

      # This token is required for the GitHub CLI to authenticate and for pushing commits.
      # The GITHUB_TOKEN is automatically created by Actions and has permissions
      # for the repository the workflow is running in.
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # A sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Check out the repository's code
      # This allows the workflow to access the repository's files
      # and make commits.
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Fetch latest issues using GitHub CLI
      # This step uses the 'gh' command-line tool to interact with GitHub.
      - name: Fetch latest 5 open issues
        run: |
          gh issue list \
            --repo "$REPO_URL" \
            --limit 5 \
            --state open \
            --json number,title,url,author.labels \
            --sort created \
            > _data/latest-issues.json
        # The 'env' key makes the GH_TOKEN available to the 'gh' command
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      # Step 3: Configure Git user
      # This is necessary to make a commit. It sets the author
      # of the commit to be the 'github-actions' bot.
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Step 4: Commit and push changes
      # This step checks if the '_data/latest-issues.json' file has changed.
      # If it has, it adds the file, commits it, and pushes to the main branch.
      - name: Commit and push if there are changes
        run: |
          # Check if there are any changes staged or unstaged
          if ! git diff --quiet _data/latest-issues.json; then
            echo "Changes detected in _data/latest-issues.json. Committing..."
            git add _data/latest-issues.json
            git commit -m "docs: Update _data/latest-issues.json with recent issues"
            git push
          else
            echo "No changes to _data/latest-issues.json. Skipping commit."
          fi
